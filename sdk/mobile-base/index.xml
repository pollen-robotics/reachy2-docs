<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mobile Base on</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/</link><description>Recent content in Mobile Base on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Jul 2023 18:49:24 +0200</lastBuildDate><atom:link href="https://doks-child-theme.netlify.app/sdk/mobile-base/index.xml" rel="self" type="application/rss+xml"/><item><title>Anti-collision safety</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/safety/</link><pubDate>Wed, 26 Jul 2023 08:37:55 +0200</pubDate><guid>https://doks-child-theme.netlify.app/sdk/mobile-base/safety/</guid><description>Overview #
The basic idea is that the LIDAR is used to detect surrounding obstacles and reduce or nullify speed commands that would create a collision with the mobile base.
Your browser does not support the video element.
The safety is active regardless of how you command the mobile base (teleop, controller, goto and set_speed).
⚠️ The safety only works with obstacles that can be seen by the LIDAR. Small obstacles that are below the LIDAR won&amp;rsquo;t be seen.</description></item><item><title>Moving the mobile base</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/moving-the-base/</link><pubDate>Wed, 26 Jul 2023 08:32:46 +0200</pubDate><guid>https://doks-child-theme.netlify.app/sdk/mobile-base/moving-the-base/</guid><description>Frame conventions #
REP 105 “Coordinate Frames for Mobile Platforms” #
Our design is coherent with ROS&amp;rsquo; conventions described in REP 105 “Coordinate Frames for Mobile Platforms”
Robot frame #
The robot frame or egocentric frame or base_link frame is rigidly attached to the robot. Its (0, 0) point is the projection on the floor of the center of the mobile base. X in front, Y to the left, Theta positive counterclockwise.</description></item><item><title>Using the mobile base without Reachy</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/mobile-base-alone/</link><pubDate>Wed, 26 Jul 2023 08:32:35 +0200</pubDate><guid>https://doks-child-theme.netlify.app/sdk/mobile-base/mobile-base-alone/</guid><description>There is no need to instanciate the entire Reachy stack to interact with the mobile base. Instanciating the mobile-base-sdk alone is very fast and easy:
from mobile_base_sdk import MobileBaseSDK
mobile_base = MobileBaseSDK('your-reachy-ip')
This will work even if the upper body is not powered (the computer has to be powered though).
Once the object &amp;lsquo;mobile_base&amp;rsquo; is implemented the syntax is the same to what has been covered in the rest of the documentation, just remove the &amp;ldquo;reachy.</description></item><item><title>Getting started with the mobile base</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/getting-started/</link><pubDate>Wed, 26 Jul 2023 08:32:26 +0200</pubDate><guid>https://doks-child-theme.netlify.app/sdk/mobile-base/getting-started/</guid><description>Overview #
To control the mobile base, we developed a Python SDK working similarly to reachy-sdk but only for the mobile base: mobile-base-sdk. As with reachy-sdk, you can use mobile-base-sdk to connect to the base remotely from another computer, as long as your computer and Reachy&amp;rsquo;s computer are connected to the same network.
However, to avoid having to use two different Python SDks when working on Reachy mobile, we integrated the use of mobile-base-sdk in reachy-sdk so that when you&amp;rsquo;re accessing the mobile base with the reachy_mobile.</description></item><item><title>Advanced</title><link>https://doks-child-theme.netlify.app/sdk/mobile-base/drive-control-modes/</link><pubDate>Wed, 26 Jul 2023 08:32:17 +0200</pubDate><guid>https://doks-child-theme.netlify.app/sdk/mobile-base/drive-control-modes/</guid><description>Drive modes #
Overview #
The drive mode impacts the way the mobile base accepts commands. We could say it&amp;rsquo;s the current state of the mobile base.
In most cases, there is no need to think about these modes or to handle them in your code. Below are the most common use cases.
If you want to use the set_speed method to spam speed commands (e.g. pilot the robot with a controller), the mode has to be manually changed to &amp;lsquo;cmd_vel&amp;rsquo;: reachy_mobile.</description></item></channel></rss>